/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cloudprofilingmonitor;

import de.hpi_web.cloudSim.profiling.builders.DatacenterBuilder;
import de.hpi_web.cloudSim.profiling.builders.HostBuilder;
import de.hpi_web.cloudSim.profiling.builders.VmBuilder;
import de.hpi_web.cloudSim.profiling.datacenter.ProfilingBroker;
import de.hpi_web.cloudSim.profiling.datacenter.ProfilingCloudlet;
import de.hpi_web.cloudSim.profiling.observer.Observable;
import de.hpi_web.cloudSim.profiling.observer.Observer;
import de.hpi_web.cloudSim.profiling.utilization.UtilizationThreshold;
import java.io.File;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import org.cloudbus.cloudsim.Cloudlet;
import org.cloudbus.cloudsim.core.CloudSim;

/**
 *
 * @author christoph
 */
public class Gui extends javax.swing.JFrame implements Observer {
    private Simulation simulation;
    private HostBuilder hostBuilder;
    private DatacenterBuilder dcBuilder;
    private VmBuilder vmBuilder;
    
    private ChartPanel chartPanel;
    /**
     * Creates new form Gui
     */
    public Gui() {
        initComponents();
        
        initializeSimulation();
        initializeCharting();
    }
    
    void initializeSimulation() {
        simulation = new Simulation(this, null, null);
        hostBuilder = new HostBuilder();
        dcBuilder = new DatacenterBuilder("DummyName");
        vmBuilder = new VmBuilder();
        dcBuilder.setHostBuilder(hostBuilder);
        simulation.setDcBuilder(dcBuilder);
        simulation.setVmBuilder(vmBuilder);
    }
    
    void initializeCharting() {
        DefaultComboBoxModel tierModel = new DefaultComboBoxModel();
        DefaultComboBoxModel valueModel = new DefaultComboBoxModel();
        
        tierModel.addElement("All");
        tierModel.addElement(ChartPanel.WEB_TIER);
        tierModel.addElement(ChartPanel.APP_TIER);
        tierModel.addElement(ChartPanel.DB_TIER);
        tierComboBox.setModel(tierModel);
        
        valueModel.addElement(ChartPanel.CPU);
        valueModel.addElement(ChartPanel.MEMORY);
        valueModel.addElement(ChartPanel.BANDWIDTH_IN);
        valueModel.addElement(ChartPanel.BANDWIDTH_OUT);
        valueModel.addElement(ChartPanel.HD_READ);
        valueModel.addElement(ChartPanel.HD_WRITE);
        valueComboBox.setModel(valueModel);
        
        chartPanel = new ChartPanel();
        chartPanel.render(chartCanvas);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        SimulationPanel = new javax.swing.JPanel();
        GlobalStatisticsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tier1_scrollPane = new javax.swing.JScrollPane();
        tier1_VMPanel = new javax.swing.JPanel();
        tier2_scrollPane = new javax.swing.JScrollPane();
        tier2_VMPanel = new javax.swing.JPanel();
        tier3_scrollPane = new javax.swing.JScrollPane();
        tier3_VMPanel = new javax.swing.JPanel();
        SettingsPanel = new javax.swing.JPanel();
        submitSettingsButton = new javax.swing.JButton();
        defaultSettingsButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        numberOfHostsTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        coresPerHostTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        ramPerHostTextField = new javax.swing.JTextField();
        mipsPerCoreTextField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        storagePerHostTextField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        bwPerHostTextField = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        numberStartVmsTextField = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        coresPerVmTextField = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        ramPerVmTextField = new javax.swing.JTextField();
        mipsPerVmCore = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        storagePerVmTextField = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        bwPerVmTextField = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        maxCpuTextField = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        minCpuTextField = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        delayTextField = new javax.swing.JTextField();
        minMemTextField = new javax.swing.JTextField();
        maxMemTextField = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        minBwInTextField = new javax.swing.JTextField();
        maxBwInTextField = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        maxBwOutTextField = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        minBwOutTextField = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        maxHdReadTextField = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        minHdReadTextField = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        maxHdWriteTextField = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        minHdWriteTextField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        tierComboBox = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        valueComboBox = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        vmComboBox = new javax.swing.JComboBox();
        chartCanvas = new javax.swing.JPanel();
        startBtn = new javax.swing.JButton();
        stopBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        trainingInput = new javax.swing.JTextPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        runningInput = new javax.swing.JTextPane();
        fileChooser = new javax.swing.JFileChooser();
        selectTrainingBtn = new javax.swing.JButton();
        selectRunningBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        SimulationPanel.setLayout(new javax.swing.BoxLayout(SimulationPanel, javax.swing.BoxLayout.LINE_AXIS));

        GlobalStatisticsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Global Statistics"));
        GlobalStatisticsPanel.setMaximumSize(new java.awt.Dimension(250, 32767));
        GlobalStatisticsPanel.setPreferredSize(new java.awt.Dimension(250, 355));

        jLabel1.setText("#VMs:");

        jLabel2.setText("0");

        jLabel3.setText("CPU Avg:");

        jLabel4.setText("0");

        javax.swing.GroupLayout GlobalStatisticsPanelLayout = new javax.swing.GroupLayout(GlobalStatisticsPanel);
        GlobalStatisticsPanel.setLayout(GlobalStatisticsPanelLayout);
        GlobalStatisticsPanelLayout.setHorizontalGroup(
            GlobalStatisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GlobalStatisticsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(GlobalStatisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(GlobalStatisticsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2))
                    .addGroup(GlobalStatisticsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 145, Short.MAX_VALUE)
                        .addComponent(jLabel4)))
                .addContainerGap())
        );
        GlobalStatisticsPanelLayout.setVerticalGroup(
            GlobalStatisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GlobalStatisticsPanelLayout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addGroup(GlobalStatisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(GlobalStatisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addContainerGap(225, Short.MAX_VALUE))
        );

        SimulationPanel.add(GlobalStatisticsPanel);

        tier1_scrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        tier1_scrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        tier1_scrollPane.setPreferredSize(new java.awt.Dimension(280, 342));

        tier1_VMPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        tier1_VMPanel.setLayout(new javax.swing.BoxLayout(tier1_VMPanel, javax.swing.BoxLayout.Y_AXIS));
        tier1_scrollPane.setViewportView(tier1_VMPanel);

        SimulationPanel.add(tier1_scrollPane);

        tier2_scrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        tier2_scrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        tier2_scrollPane.setPreferredSize(new java.awt.Dimension(280, 313));

        tier2_VMPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        tier2_VMPanel.setLayout(new javax.swing.BoxLayout(tier2_VMPanel, javax.swing.BoxLayout.Y_AXIS));
        tier2_scrollPane.setViewportView(tier2_VMPanel);

        SimulationPanel.add(tier2_scrollPane);

        tier3_scrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        tier3_scrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        tier3_scrollPane.setPreferredSize(new java.awt.Dimension(280, 307));

        tier3_VMPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED)));
        tier3_VMPanel.setLayout(new javax.swing.BoxLayout(tier3_VMPanel, javax.swing.BoxLayout.Y_AXIS));
        tier3_scrollPane.setViewportView(tier3_VMPanel);

        SimulationPanel.add(tier3_scrollPane);

        jTabbedPane1.addTab("Simulation", SimulationPanel);

        submitSettingsButton.setText("Submit");
        submitSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitSettingsButtonActionPerformed(evt);
            }
        });

        defaultSettingsButton.setText("Default");

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Datacenter"));

        jLabel7.setText("#Hosts:");

        numberOfHostsTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        numberOfHostsTextField.setText("3");

        jLabel8.setText("#PES per Host:");

        coresPerHostTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        coresPerHostTextField.setText("4");

        jLabel9.setText("MB RAM per Host:");

        ramPerHostTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        ramPerHostTextField.setText("4096");

        mipsPerCoreTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        mipsPerCoreTextField.setText("1200");

        jLabel11.setText("MIPS per PES:");

        jLabel12.setText("MB Storage per Host");

        storagePerHostTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        storagePerHostTextField.setText("1600000");

        jLabel13.setText("MBit/s Bandwith per Host");

        bwPerHostTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        bwPerHostTextField.setText("10000");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel11)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 120, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bwPerHostTextField)
                    .addComponent(mipsPerCoreTextField)
                    .addComponent(ramPerHostTextField)
                    .addComponent(coresPerHostTextField)
                    .addComponent(numberOfHostsTextField)
                    .addComponent(storagePerHostTextField))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(numberOfHostsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(coresPerHostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(ramPerHostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(mipsPerCoreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(storagePerHostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(bwPerHostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("VM"));

        jLabel15.setText("#VMs at Start:");

        numberStartVmsTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        numberStartVmsTextField.setText("1");

        jLabel16.setText("#PES per VM:");

        coresPerVmTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        coresPerVmTextField.setText("1");

        jLabel17.setText("MB RAM per VM:");

        ramPerVmTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        ramPerVmTextField.setText("1700");

        mipsPerVmCore.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        mipsPerVmCore.setText("1000");

        jLabel18.setText("MIPS per PES:");

        jLabel19.setText("MB Storage per VM:");

        storagePerVmTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        storagePerVmTextField.setText("160000");

        jLabel20.setText("MBit/s Bandwith per VM:");

        bwPerVmTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        bwPerVmTextField.setText("1000");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel19)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16)
                    .addComponent(jLabel17)
                    .addComponent(jLabel18)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bwPerVmTextField)
                    .addComponent(mipsPerVmCore)
                    .addComponent(ramPerVmTextField)
                    .addComponent(coresPerVmTextField)
                    .addComponent(numberStartVmsTextField)
                    .addComponent(storagePerVmTextField))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(numberStartVmsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(coresPerVmTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(ramPerVmTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(mipsPerVmCore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(storagePerVmTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(bwPerVmTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Simulation Settings"));

        jLabel14.setText("max. CPU/VM:");

        maxCpuTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        maxCpuTextField.setText("70");

        jLabel21.setText("min. CPU/VM:");

        minCpuTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        minCpuTextField.setText("30");

        jLabel22.setText("Delay between Steps:");

        delayTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        delayTextField.setText("1");

        minMemTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        minMemTextField.setText("30");

        maxMemTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        maxMemTextField.setText("70");

        jLabel23.setText("max. Mem./VM:");

        jLabel24.setText("min. Mem./VM:");

        jLabel25.setText("min. BwIn./VM:");

        minBwInTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        minBwInTextField.setText("0");

        maxBwInTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        maxBwInTextField.setText("0");

        jLabel26.setText("max. BwIn./VM:");

        jLabel27.setText("max. BwO./VM:");

        maxBwOutTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        maxBwOutTextField.setText("0");

        jLabel28.setText("min. BwO./VM:");

        minBwOutTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        minBwOutTextField.setText("0");

        jLabel29.setText("max. HD R/VM:");

        maxHdReadTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        maxHdReadTextField.setText("0");

        jLabel30.setText("min. HD R/VM:");

        minHdReadTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        minHdReadTextField.setText("0");

        jLabel31.setText("max. HD W/VM:");

        maxHdWriteTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        maxHdWriteTextField.setText("0");
        maxHdWriteTextField.setMinimumSize(new java.awt.Dimension(18, 27));

        jLabel32.setText("min. HD W/VM:");

        minHdWriteTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        minHdWriteTextField.setText("0");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel31)
                    .addComponent(jLabel29)
                    .addComponent(jLabel27)
                    .addComponent(jLabel26)
                    .addComponent(jLabel23)
                    .addComponent(jLabel14))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(maxHdWriteTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(maxHdReadTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(maxBwOutTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxBwInTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(maxMemTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(maxCpuTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel32)
                    .addComponent(jLabel30)
                    .addComponent(jLabel28)
                    .addComponent(jLabel25)
                    .addComponent(jLabel24)
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(minHdWriteTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minHdReadTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(minBwOutTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(minBwInTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(minMemTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(minCpuTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(delayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(maxCpuTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel21)
                            .addComponent(minCpuTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel23)
                                    .addComponent(maxMemTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel26)
                                    .addComponent(maxBwInTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel24)
                                    .addComponent(minMemTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel25)
                                    .addComponent(minBwInTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel27)
                                .addComponent(maxBwOutTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel28)
                                .addComponent(minBwOutTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel29)
                            .addComponent(maxHdReadTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(177, 177, 177)
                        .addComponent(minHdReadTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(182, 182, 182)
                        .addComponent(jLabel30)))
                .addGap(5, 5, 5)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel32)
                    .addComponent(jLabel31)
                    .addComponent(minHdWriteTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxHdWriteTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(delayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout SettingsPanelLayout = new javax.swing.GroupLayout(SettingsPanel);
        SettingsPanel.setLayout(SettingsPanelLayout);
        SettingsPanelLayout.setHorizontalGroup(
            SettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(defaultSettingsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(submitSettingsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        SettingsPanelLayout.setVerticalGroup(
            SettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SettingsPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(defaultSettingsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(submitSettingsButton))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Settings", SettingsPanel);

        tierComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tierComboBoxItemStateChanged(evt);
            }
        });

        jLabel5.setText("Tier:");

        jLabel6.setText("Item:");

        valueComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                valueComboBoxItemStateChanged(evt);
            }
        });

        jLabel10.setText("VM:");

        vmComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        chartCanvas.setLayout(new javax.swing.BoxLayout(chartCanvas, javax.swing.BoxLayout.LINE_AXIS));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(valueComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(vmComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 799, Short.MAX_VALUE))
                    .addComponent(chartCanvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(valueComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(vmComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addComponent(chartCanvas, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Charts", jPanel1);

        startBtn.setText("Start");
        startBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBtnActionPerformed(evt);
            }
        });

        stopBtn.setText("Stop");
        stopBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopBtnActionPerformed(evt);
            }
        });

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        trainingInput.setText("training.csv");
        trainingInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                trainingInputFocusGained(evt);
            }
        });
        jScrollPane2.setViewportView(trainingInput);

        jScrollPane5.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane5.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        runningInput.setText("running.csv");
        jScrollPane5.setViewportView(runningInput);

        fileChooser.setDialogTitle("Choose input file...");
        fileChooser.setFileFilter(new CSVFileFilter());
        fileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserActionPerformed(evt);
            }
        });

        selectTrainingBtn.setText("Select Training Input File...");
        selectTrainingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectTrainingBtnActionPerformed(evt);
            }
        });

        selectRunningBtn.setText("Select Running Input File...");
        selectRunningBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectRunningBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1218, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(selectRunningBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(stopBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(selectTrainingBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(startBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(693, Short.MAX_VALUE)
                    .addComponent(fileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(404, 404, 404)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(startBtn)
                        .addGap(6, 6, 6)
                        .addComponent(stopBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(selectTrainingBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(selectRunningBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane5))))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(444, Short.MAX_VALUE)
                    .addComponent(fileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(42, 42, 42)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitSettingsButtonActionPerformed
        submitDcSettings();
        submitVmSettings();
        submitDelay();
        submitUtilizationThresholds();
    }//GEN-LAST:event_submitSettingsButtonActionPerformed

    private void submitDcSettings() {
        hostBuilder.setBandwidth(Long.parseLong(bwPerHostTextField.getText()))
                .setRam(Integer.parseInt(ramPerHostTextField.getText()))
                .setStorage(Long.parseLong(storagePerHostTextField.getText()))
                .setPes(Integer.parseInt(coresPerHostTextField.getText()))
                .setMips(Integer.parseInt(mipsPerCoreTextField.getText()));
        dcBuilder.setNumberOfHosts(Integer.parseInt(numberOfHostsTextField.getText()));
    }
    
    private void submitVmSettings() {
        vmBuilder.setBandwidth(Long.parseLong(bwPerVmTextField.getText()))
                .setRam(Integer.parseInt(ramPerVmTextField.getText()))
                .setSize(Long.parseLong(storagePerVmTextField.getText()))
                .setPes(Integer.parseInt(coresPerVmTextField.getText()))
                .setMips(Integer.parseInt(mipsPerVmCore.getText()));
    }
    
    private void submitDelay() {
        simulation.setDelay(Double.parseDouble(delayTextField.getText()));
    }
    
    private void submitUtilizationThresholds() {
        UtilizationThreshold cpuThreshold = new UtilizationThreshold(
                Integer.parseInt(maxCpuTextField.getText()), 
                Integer.parseInt(minCpuTextField.getText()));
        simulation.setCpuThreshold(cpuThreshold);
        UtilizationThreshold memThreshold = new UtilizationThreshold(
                Integer.parseInt(maxMemTextField.getText()), 
                Integer.parseInt(minMemTextField.getText()));
        simulation.setMemThreshold(memThreshold);
        UtilizationThreshold bwInThreshold = new UtilizationThreshold(
                Integer.parseInt(maxBwInTextField.getText()), 
                Integer.parseInt(minBwInTextField.getText()));
        simulation.setBwInThreshold(bwInThreshold);
        UtilizationThreshold bwOutThreshold = new UtilizationThreshold(
                Integer.parseInt(maxBwOutTextField.getText()), 
                Integer.parseInt(minBwOutTextField.getText()));
        simulation.setBwOutThreshold(bwOutThreshold);
        UtilizationThreshold hdReadThreshold = new UtilizationThreshold(
                Integer.parseInt(maxHdReadTextField.getText()), 
                Integer.parseInt(minHdReadTextField.getText()));
        simulation.setHdReadThreshold(hdReadThreshold);
        UtilizationThreshold hdWriteThreshold = new UtilizationThreshold(
                Integer.parseInt(maxHdWriteTextField.getText()), 
                Integer.parseInt(minHdWriteTextField.getText()));
        simulation.setHdWriteThreshold(hdWriteThreshold);
        
    }
    
    
    @Override
    public void refreshData(Observable subject) {
        ProfilingBroker broker = (ProfilingBroker) subject;
        Boolean newValuesForGraph = true;
        // TODO: we need to decide which text area to use; this is just a fixed, quick and dirty solution
        JPanel area = tier1_VMPanel;
        String tier = ChartPanel.WEB_TIER;
        if (broker.getName().equalsIgnoreCase("appBroker")) {
            area = tier2_VMPanel;
            tier = ChartPanel.APP_TIER;
        } else if (broker.getName().equalsIgnoreCase("dbBroker")) {
            area = tier3_VMPanel;
            tier = ChartPanel.DB_TIER;
        }
        area.invalidate();
        area.removeAll();
        for(Cloudlet cl : broker.getCloudletSubmittedList()) {
                ProfilingCloudlet cloudlet = (ProfilingCloudlet) cl;
                Double cpuUtil = new Double(cloudlet.getUtilizationOfCpu(CloudSim.clock()));
                Double memUtil = new Double(cloudlet.getUtilizationOfRam(CloudSim.clock()));
                // TODO: do this for BW IN, BW OUT, HD Write, HD Read. Need to adjust cloudlet
                Double bwInUtil = new Double(cloudlet.getUtilizationOfBw(CloudSim.clock()));
                Double bwOutUtil = new Double(cloudlet.getUtilizationOfBwOut(CloudSim.clock()));
                Double hdReadUtil = new Double(cloudlet.getUtilizationOfDiskRead(CloudSim.clock()));
                Double hdWriteUtil = new Double(cloudlet.getUtilizationOfDiskWrite(CloudSim.clock()));
                
                int vmId = cloudlet.getVmId();
                int hostId = 0;

                hostId = broker.getVmForVmId(vmId).getHost().getId();
                VMContainer c = createVmContainer(area, "VM: " + vmId + " at host " + hostId);
                
                c.setCpuUtil(cpuUtil, simulation.getCpuThreshold());
                c.setMemUtil(memUtil, simulation.getMemThreshold());
                c.setBwInUtil(bwInUtil, simulation.getBwInThreshold());
                c.setBwOutUtil(bwOutUtil, simulation.getBwOutThreshold());
                c.setHdReadUtil(hdReadUtil, simulation.getHdReadThreshold());
                c.setHdWriteUtil(hdWriteUtil, simulation.getHdWriteThreshold());
                
                if (newValuesForGraph) {
                    chartPanel.addCpuValue(tier, cpuUtil);
                    chartPanel.addMemValue(tier, memUtil);
                    chartPanel.addBwInValue(tier, bwInUtil);
                    chartPanel.addBwOutValue(tier, bwOutUtil);
                    chartPanel.addHdReadValue(tier, hdReadUtil);
                    chartPanel.addHdWriteValue(tier, hdWriteUtil);
                    newValuesForGraph = false;
                }
        }
        area.validate();
        //area.repaint();
    }
    
    private VMContainer createVmContainer(JPanel parent, String title) {
        VMContainer vmPanel = new VMContainer();
        vmPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, title, javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DejaVu Sans", 1, 10)));
        parent.add(vmPanel);
        return vmPanel;
    }
 
    private void updateChart() {
        String selectedItem = (String) valueComboBox.getSelectedItem();
        int tier = tierComboBox.getSelectedIndex();
        switch (selectedItem) {
            case ChartPanel.CPU: 
                chartPanel.selectCpuChart();
                break;        
            case ChartPanel.MEMORY: 
                chartPanel.selectMemChart();
                break;
            case ChartPanel.BANDWIDTH_IN: 
                chartPanel.selectBwInChart();
                break;
            case ChartPanel.BANDWIDTH_OUT: 
                chartPanel.selectBwOutChart();
                break;
            case ChartPanel.HD_READ: 
                chartPanel.selectHdReadChart();
                break;
            case ChartPanel.HD_WRITE: 
                chartPanel.selectHdWriteChart();
                break;
            default:
                chartPanel.selectCpuChart();
                break;
        // TODO: finish cases
        }
    }
    
    private void startBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBtnActionPerformed
        File t = new File(trainingInput.getText());
        File r = new File(runningInput.getText());
        if (t.isFile() && r.isFile()) {
            simulation.setTraining(t);
            simulation.setRunning(r);
            simulation.start();
        }
        // TODO: wrong input
    }//GEN-LAST:event_startBtnActionPerformed

    private void fileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileChooserActionPerformed

    private void trainingInputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_trainingInputFocusGained

    }//GEN-LAST:event_trainingInputFocusGained

    private void selectTrainingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectTrainingBtnActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            trainingInput.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_selectTrainingBtnActionPerformed

    private void selectRunningBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectRunningBtnActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            runningInput.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_selectRunningBtnActionPerformed

    private void stopBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopBtnActionPerformed
        simulation.stopped(true);
    }//GEN-LAST:event_stopBtnActionPerformed

    private void tierComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tierComboBoxItemStateChanged
        chartPanel.selectTier((String)evt.getItem());
        chartPanel.render();
    }//GEN-LAST:event_tierComboBoxItemStateChanged

    private void valueComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_valueComboBoxItemStateChanged
        chartPanel.selectChart((String)evt.getItem());
        chartPanel.render();
    }//GEN-LAST:event_valueComboBoxItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Gui().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel GlobalStatisticsPanel;
    private javax.swing.JPanel SettingsPanel;
    private javax.swing.JPanel SimulationPanel;
    private javax.swing.JTextField bwPerHostTextField;
    private javax.swing.JTextField bwPerVmTextField;
    private javax.swing.JPanel chartCanvas;
    private javax.swing.JTextField coresPerHostTextField;
    private javax.swing.JTextField coresPerVmTextField;
    private javax.swing.JButton defaultSettingsButton;
    private javax.swing.JTextField delayTextField;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField maxBwInTextField;
    private javax.swing.JTextField maxBwOutTextField;
    private javax.swing.JTextField maxCpuTextField;
    private javax.swing.JTextField maxHdReadTextField;
    private javax.swing.JTextField maxHdWriteTextField;
    private javax.swing.JTextField maxMemTextField;
    private javax.swing.JTextField minBwInTextField;
    private javax.swing.JTextField minBwOutTextField;
    private javax.swing.JTextField minCpuTextField;
    private javax.swing.JTextField minHdReadTextField;
    private javax.swing.JTextField minHdWriteTextField;
    private javax.swing.JTextField minMemTextField;
    private javax.swing.JTextField mipsPerCoreTextField;
    private javax.swing.JTextField mipsPerVmCore;
    private javax.swing.JTextField numberOfHostsTextField;
    private javax.swing.JTextField numberStartVmsTextField;
    private javax.swing.JTextField ramPerHostTextField;
    private javax.swing.JTextField ramPerVmTextField;
    private javax.swing.JTextPane runningInput;
    private javax.swing.JButton selectRunningBtn;
    private javax.swing.JButton selectTrainingBtn;
    private javax.swing.JButton startBtn;
    private javax.swing.JButton stopBtn;
    private javax.swing.JTextField storagePerHostTextField;
    private javax.swing.JTextField storagePerVmTextField;
    private javax.swing.JButton submitSettingsButton;
    private javax.swing.JPanel tier1_VMPanel;
    private javax.swing.JScrollPane tier1_scrollPane;
    private javax.swing.JPanel tier2_VMPanel;
    private javax.swing.JScrollPane tier2_scrollPane;
    private javax.swing.JPanel tier3_VMPanel;
    private javax.swing.JScrollPane tier3_scrollPane;
    private javax.swing.JComboBox tierComboBox;
    private javax.swing.JTextPane trainingInput;
    private javax.swing.JComboBox valueComboBox;
    private javax.swing.JComboBox vmComboBox;
    // End of variables declaration//GEN-END:variables

}
